Git 分散型バージョン管理システム

git init:初期起動 .gitディレクトリを作成する

clone:リモートリポジトリをローカルにダウンロードする。

ブランチ:作業履歴を枝分かれさせて記録していくためのもの。
ブランチモデル:ブランチをどのように切って運用するかをまとめたもの。
git-flowやGitHub Flowなどが有名

・git-flow:細かくブランチを切った厳格な運用モデル。
master, develop, release, feature, hotfix, supportの6種類を用意する。

master: リリース可能な完全品質を保証するブランチ
releaseブランチからのマージのみで更新される。
masterブランチ上で直接作業したりコミットするのはNG。
tagはmasterブランチ上でのみ存在する。

develop: 開発の主軸になるブランチ
masterブランチから派生させる。
developブランチ上で直接作業したりこコミットするのはNG。
developブランチからfeatureブランチやreleaseブランチを切る。

release: リリース作業を行うためのブランチ
developブランチから派生させる。
リリース作業が完了したらmasterブランチとdevelopブランチにマージする。
masterブランチにマージする際のコミットではtagを打つ。
マージされたら該当のreleaseブランチは削除する。

feature: 機能追加および修正作業を行うブランチ
developブランチから派生させる。
作業完了としてレビューが通ったら、developブランチにマージする。
どのような機能追加を行うブランチなのかが一目でわかるようなブランチ名を心がける。
マージされたら該当のfeatureブランチは削除する。

hotfix: リリース済みのものの緊急修正用の作業を行うブランチ
masterブランチから派生させる。
修正作業完了後はmasterブランチとdevelopブランチにマージする。
また、masterブランチにマージする際のコミットではリリースタグを打つ。
マージされたら該当のhotfixブランチは削除する。

suport: 旧バージョンをサポートするためのブランチ
必須ではないが、旧バージョンをサポートする必要がある場合は、masterブランチのtagからsupportブランチを派生させる。
旧バージョンでバグが発生した場合は、supportブランチ上で直接バグフィックスを行いコミットする。
また、バグが過去の複数バージョンにまたがる場合は、修正コミットは対象のすべてのバージョンのsupportブランチにcherry-pickする。
サポートが完了したら、該当のsupportブランチは削除する。


・GitHub Flow: 簡略化されたブランチ運用モデル。
master, topicの2種類のブランチを用意する。

master: リリース可能な完全品質を保証するブランチ
git-flowのmaster+developの役割。
masterブランチ上で直接作業したりコミットするのはNG。
リリース作業はmasterブランチ上で行う。(releaseブランチは別途用意しない。)

topic: 機能追加やバグ修正を行うブランチ
実際のファイル編集作業はこのブランチ上で行う。
masterブランチから枝分かれする唯一のブランチ。
git-flowのfeature+hotfixの役割。
masterブランチにマージされたらtopicブランチは削除する。

□コマンド一覧
・ブランチ作成
$ git branch sample1

・ブランチ一覧確認
*印が現在いるブランチを示す。
$ git branch
* master
  develop

・ブランチ一覧確認(リモート追跡ブランチも出力)
$ git branch --all
* master
  develop
  remotes/origin/HEAD -> origin/master
  remotes/origin/master

 ・origin確認
 $ git remote git-url origin
 XXXXX

remotes: リモート追跡ブランチ
ローカル上にリモートリポジトリの情報を保持している。
ただし自動で最新状態に更新されていくようなものではなく自分で適宜更新していく必要がある。

origin: リモートリポジトリのURLの別名。
gitのコンフィグで設定可能。

HEAD: 現在のブランチの先頭を意味する。
1つ前のHEAD位置の指定の仕方
HEAD^ または HEAD~
2つ前のHEAD位置の指定の仕方
HEAD^^ または　HEAD~~ または HEAD~2

origin/master: originというリモートリポジトリのmasterブランチという意味
origin省略した場合(単なるmaster)はローカルリポジトリのmasterブランチを指す。

・ブランチ変更(チェックアウト)
$ git checkout sample1

・ブランチ作成+チェックアウト: -b をつける
$ git checkout -b sample2

・ブランチ名変更: branchに -m をつける
$ git branch -m sample2 sample3

・ブランチ削除: branchに -d をつける。　強制削除: -D
$ git branch -d sample3


-リモートリポジトリ- 
・リモートリポジトリ一覧
$ git remote

・一覧表示(URLも表示): remoteに -v をつける
$ git remote -v

・リモートリポジトリの追加: 任意の名前を追加できる
$ git remote add sample_remote https://XXXXX
$ git remote -v
origin  http://XXXXX (fetch)
origin  http://XXXXX (push)
sample_remote   https://XXXXX (fetch)
sample_remote   https://XXXXX (push)

・リモートリポジトリ削除
$ git remote rm sample_remote
$ git remote -v
origin  http://XXXXX (fetch)
origin  http://XXXXX (push)


- ワーキングツリーからリモートリポジトリまでの流れ -
                   ← local →                     |    ← remote →
ワーキングツリー →→→ インデックス →→→ ローカルリポジトリ →→→ リモートリポジトリ
               add           commit              |push			

・ワーキングツリー:
ファイルの編集作業場所
ここでファイルの編集や追加や削除を行う。

・インデックス(ステージング環境):
コミットするためのファイルを記録する場所。
ローカルリポジトリに反映させたい編集を選択することができる。
ワーキングツリーで編集したファイルは add コマンドでインデックスへ移動させる。

・ローカルリポジトリ: 
リモートリポジトリにアップロードするためのコミット履歴とファイルを記録する場所。
インデックス上のファイルを commit コマンドでローカルリポジトリにコミットする。

・リモートリポジトリ:
複数人で共有する場所。
ローカルコミットしたファイルを push コマンドでリモートリポジトリにアップロードする。

・前回のコミットと比較した変更内容の表示。何もない場合は何も表示しない。
$ git status

・ワーキングツリー →→ ステージング環境への反映、追加
$ git add

例:
$ touch a.txt
$ git add a.txt
$ git status
On branch sample
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   a.txt

・ローカルコミットの実行
$ git commit
 -m : 新規コミットを作成する。 " "の中にコミットメッセージを記載する。
 GitHubにIssuesという課題管理機能があり、メッセージ中に#をつけて記載することで、管理している課題とコミットを関連づけできる。

 --amend : 直前のコミットを上書きする。ファイルの追加漏れやメッセージの変更に対応する。
 viで直前のコミットメッセージが表示されるので、必要に応じて内容を変更する。

・ローカル →→ リモーロリポジトリへの反映、アップロード
$ git push　
 -f : 強制的にpushする。rebase後は-fオプションが必須。

・tag: 重要なタイミングで印をつけるためのもの。
git-flowモデルではreleaseブランチ上でtagを作成し、リモートリポジトリへpushする。
そうすることで、リモートリポジトリ上にtagという保存ポイントを作成できる。
$ git tag v1.0 :「v1.0」というtagの作成
$ git tag : tag一覧表示













